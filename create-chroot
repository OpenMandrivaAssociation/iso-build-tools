#!/bin/bash
DIST=omdv
TYPE=kde4
ARCH=`uname -m`
BRANCH=cooker
SUDO=sudo
OURDIR=$(realpath $(dirname $0))
[ "`id -u`" = "0" ] && SUDO=""
[ "$ARCH" = "i386" ] && ARCH=i586

[ -n "$1" ] && TYPE="$1"
[ -n "$2" ] && ARCH="$2"
[ -n "$3" ] && DIST="$3"

# Usage: parsePkgList xyz.lst
# Shows the list of packages in the package list file (including any packages
# mentioned by other package list files being %include-d)
parsePkgList() {
	LINE=0
	cat "$1" |while read r; do
		LINE=$((LINE+1))
		SANITIZED="`echo $r |sed -e 's,	, ,g;s,  *, ,g;s,^ ,,;s, $,,;s,#.*,,'`"
		[ -z "$SANITIZED" ] && continue
		if [ "`echo $SANITIZED |cut -b1-9`" = "%include " ]; then
			INC="`echo $SANITIZED |cut -b10-`"
			if ! [ -e "$INC" ]; then
				echo "ERROR: Package list doesn't exist: $INC (included from $1 line $LINE)" >&2
				exit 1
			fi
			parsePkgList "`echo $SANITIZED |cut -b10-`"
			continue
		fi
		echo $SANITIZED
	done
}

# Usage: getPackages packages.lst /target/dir
# Downloads all packages in the packages.lst file and their
# dependencies.
# Packages go to /target/dir/rpms
getPackages() {
	$SUDO urpmi.addmedia --urpmi-root "$2" --distrib http://abf-downloads.abf.io/cooker/repository/$ARCH
	$SUDO urpmi.update --urpmi-root "$2" -a -c -ff --wget
	parsePkgList "$1" |xargs $SUDO urpmi --urpmi-root "$ROOT" --no-install --download-all --no-verify-rpm --fastunsafe --ignoresize "$2" --auto
}

# Usage: createChroot packages.lst /target/dir
# Creates a chroot environment with all packages in the packages.lst
# file and their dependencies in /target/dir
createChroot() {
	# Make sure /proc, /sys and friends are mounted so %post scripts can use them
	$SUDO mkdir -p "$2"/proc "$2"/sys
	$SUDO urpmi.addmedia --urpmi-root "$2" --distrib http://abf-downloads.abf.io/cooker/repository/$ARCH
	$SUDO urpmi.update -a -c -ff --wget --urpmi-root "$2" main
	$SUDO urpmi.update -a -c -ff --wget --urpmi-root "$2" updates
	$SUDO mount --bind /proc "$2"/proc
	$SUDO mount --bind /sys "$2"/sys
	parsePkgList "$1" |xargs $SUDO urpmi --urpmi-root "$2" --no-verify-rpm --fastunsafe --ignoresize --auto
	$SUDO mount --bind /dev "$2"/dev
	$SUDO install -c -m 755 $OURDIR/create-initramfs.sh $OURDIR/dracut-00-live.sh "$2"/boot/
	$SUDO chroot "$2" /boot/create-initramfs.sh
	$SUDO rm "$2"/boot/create-initramfs.sh
	$SUDO umount "$2"/proc
	$SUDO umount "$2"/sys
	$SUDO umount "$2"/dev
}

# Usage: setupIsoLinux /target/dir
# Sets up isolinux to boot /target/dir
setupIsolinux() {
	cd "$1"/lib/modules
	KERNEL=`ls -d --sort=time [0-9]* |head -n1 |sed -e 's,/$,,'`
	cd -
	cd "$1"/boot
	pwd
	ls
	echo $KERNEL
	$SUDO cp -f vmlinuz-$KERNEL vmlinuz
	$SUDO cp -f initrd-$KERNEL.img initrd.img
	ls -l "$1"/boot/vmlinuz "$1"/boot/initrd.img
	cd -
	$SUDO mkdir -p "$1"/isolinux
	$SUDO chmod 1777 "$1"/isolinux
	$SUDO cp "$1"/usr/lib/syslinux/isolinux.bin "$1"/usr/lib/syslinux/vesamenu.c32 "$1"/usr/lib/syslinux/hdt.c32 "$1"/usr/share/pci.ids "$1"/usr/lib/syslinux/poweroff.com "$1"/isolinux
	# kernel/initrd filenames referenced below are the ISO9660 names.
	# syslinux doesn't support Rock Ridge.
	cat >"$1"/isolinux/isolinux.cfg <<EOF
UI vesamenu.c32
DEFAULT boot
PROMPT 0
MENU TITLE Welcome to OpenMandriva Lx
MENU BACKGROUND splash.png
TIMEOUT 50
MENU WIDTH 78
MENU MARGIN 4
MENU ROWS 5
MENU VSHIFT 10
MENU TIMEOUTROW 13
MENU TABMSGROW 11
MENU CMDLINEROW 11
MENU HELPMSGROW 16
MENU HELPMSGENDROW 29

MENU COLOR border 30;44 #40ffffff #a0000000 std
MENU COLOR title 1;36;44 #9033ccff #a0000000 std
MENU COLOR sel 7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel 37;44 #50ffffff #a0000000 std
MENU COLOR help 37;40 #c0ffffff #a0000000 std
MENU COLOR timeout_msg 37;40 #80ffffff #00000000 std
MENU COLOR timeout 1;37;40 #c0ffffff #00000000 std
MENU COLOR msg07 37;40 #90ffffff #a0000000 std
MENU COLOR tabmsg 31;40 #30ffffff #00000000 std

LABEL boot
	MENU LABEL Boot OpenMandriva Lx 2013.0
	LINUX /boot/vmlinuz
	INITRD /boot/initrd.img
	APPEND initrd=/boot/initrd.img rootfstype=auto ro rd.live.image rhgb vga=current splash=silent logo.nologo root=live:/dev/disk/by-label/OpenMandriva

LABEL install
	MENU LABEL Install OpenMandriva Lx 2013.0
	LINUX /boot/vmlinuz
	INITRD /boot/initrd.img
	APPEND initrd=/boot/initrd.img rootfstype=auto ro rd.live.image rhgb vga=current splash=silent logo.nologo root=live:/dev/disk/by-label/OpenMandriva install

LABEL vesa
	MENU LABEL Boot OpenMandriva Lx 2013.0 in safe mode
	LINUX /boot/vmlinuz
	INITRD /boot/initrd.img
	APPEND initrd=/boot/initrd.img rootfstype=auto ro rd.live.image rhgb vga=current splash=silent logo.nologo xdriver=vesa nokmsboot install root=live:/dev/disk/by-label/OpenMandriva

LABEL memtest
	MENU LABEL Test memory
	LINUX /boot/memtest.bin

LABEL hardware
	MENU LABEL Run hardware detection tool
	COM32 hdt.c32

LABEL harddisk
	MENU LABEL Boot from harddisk
	BOOTFALLBACK -1

LABEL poweroff
	MENU LABEL Turn off computer
	COMBOOT poweroff.com
EOF
	$SUDO chmod 0755 "$1"/isolinux
}

# Usage: buildIso filename.iso rootdir
# Builds an ISO file from the files in rootdir
buildIso() {
	$SUDO mkisofs -o "$1" -b isolinux/isolinux.bin -c isolinux/boot.cat \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		-R -l -V OpenMandriva "$2"
	ls -l "$1"
	$SUDO isohybrid "$1"
	ls -l "$1"
}

#Force update of critical packages
urpmq --list-url
urpmi.update -ff updates
urpmi --no-verify-rpm perl-URPM

ROOT="`mktemp -d /tmp/liverootXXXXXX`"
[ -z "$ROOT" ] && ROOT=/tmp/liveroot.$$
$SUDO mkdir -p "$ROOT"/tmp

if [ -d iso-pkg-lists ]; then
    rm -rf iso-pkg-lists
fi

### possible fix for timed out GIT pulls
PKGLIST="https://abf.io/openmandriva/iso-pkg-lists/archive/iso-pkg-lists-${BRANCH}.tar.gz"
if [ ! -d iso-pkg-lists ]; then
    if [ $BRANCH = "cooker"]; then
	BRANCH=master
    fi

    wget --tries=10 -O iso-pkg-lists-${BRANCH}.tar.gz --content-disposition ${PKGLIST}
    tar -xf iso-pkg-lists-${BRANCH}.tar.gz
    mv -f iso-pkg-lists-${BRANCH} iso-pkg-lists
    rm -f iso-pkg-lists-${BRANCH}.tar.gz
fi
###

cd iso-pkg-lists
# getPackages "${DIST}-${TYPE}.lst" /tmp/packages
createChroot "${DIST}-${TYPE}.lst" "$ROOT"
setupIsolinux "$ROOT"
buildIso $OURDIR/OpenMandriva.iso "$ROOT"
cd ..

