#!/bin/bash

OURDIR=$(realpath $(dirname $0))
if echo $OURDIR |grep -q /home/vagrant; then
	# We're in ABF -- things are a little odd
	BLDNAME=iso-build-tools
else
	BLDNAME=$(basename $OURDIR)
fi

if pwd |grep -q "^$OURDIR"; then
	echo "Don't run this script from within its directory."
	echo "Try:"
	echo "cd $(realpath $OURDIR/..) ; $BLDNAME/$(basename $0)"
	exit 1
fi

if [ "`id -u`" != "0" ]; then
	# We need to be root for umount and friends to work...
	exec sudo $0 "$@"
	echo Run me as root
	exit 1
fi

[ -z "$EXTARCH" ] && EXTARCH="$1"
[ -z "$EXTARCH" ] && EXTARCH="x86_64"
CHROOTNAME="buildchroot-$EXTARCH"

[ -z "$TREE" ] && TREE="$2"
[ -z "$TREE" ] && TREE=cooker

[ -z "$VERSION" ] && VERSION="$3"
[ -z "$VERSION" ] && VERSION="`date +%Y.0`"

[ -z "$RELEASE_ID" ] && RELEASE_ID="$4"
[ -z "$RELEASE_ID" ] && RELEASE_ID="alpha"

[ -z "$DESKTOP" ] && DESKTOP="$5"
[ -z "$DESKTOP" ] && DESKTOP="kde4"

[ -z "$DISPLAYMANAGER" ] && DISPLAYMANAGER="$6"
[ -z "$DISPLAYMANAGER" ] && DISPLAYMANAGER="kdm"

REPOPATH="http://abf-downloads.abf.io/$TREE/repository/$EXTARCH/"
SRCPATH="https://abf.io/openmandriva/$BLDNAME.git"
PKGLIST="https://abf.io/openmandriva/iso-pkg-lists.git"
LOGDIR="."
BRANCH="master"
CHROOTOPTS="$CHROOTNAME /bin/su root -c"

umount_all() {
	umount -f $CHROOTNAME/sys || :
	umount -f $CHROOTNAME/proc || :
	umount -f $CHROOTNAME/dev/pts || :
	umount -f $CHROOTNAME/dev || :
}
error() {
	umount_all
	exit 1
}

# Don't leave potentially dangerous stuff if we had to error out...
trap error ERR

## pushd "$OURDIR"
## [ -d iso-pkg-lists ] || git clone -b $BRANCH $PKGLIST
## popd

### possible fix for timed out GIT pulls
pushd "$OURDIR"
PKGLIST="https://abf.io/openmandriva/iso-pkg-lists/archive/iso-pkg-lists-${BRANCH}.tar.gz"
if [ ! -d iso-pkg-lists ]; then
	wget --tries=10 -O iso-pkg-lists-${BRANCH}.tar.gz --content-disposition ${PKGLIST}
	tar -xzf iso-pkg-lists-${BRANCH}.tar.gz
	mv -f iso-pkg-lists-${BRANCH} iso-pkg-lists
	rm -f iso-pkg-lists-${BRANCH}.tar.gz
fi
popd
###

#Force update of critical packages
urpmq --list-url
urpmi.update -ff updates
urpmi perl-URPM

echo $CHROOTNAME
echo $REPOPATH
echo $EXTARCH
if [ -d "$CHROOTNAME" ]; then
	echo "## Chroot $CHROOTNAME exists. Using existing chroot. ##"
	urpmi.update -a --wget --urpmi-root $CHROOTNAME main
	umount_all
else
	echo "## Chroot $CHROOTNAME is missing. Creating chroot. ##"
	mkdir $CHROOTNAME
	urpmi.addmedia --wget --urpmi-root $CHROOTNAME --distrib $REPOPATH > $LOGDIR/addrepo.log 2>&1
	urpmi.addmedia perlurpm_update http://abf-downloads.rosalinux.ru/openmandriva2014.0/container/2186308/i586/main/release/
	urpmi perl-URPM
	echo "## Updating repositories isnide chroot. ##"
	urpmi.update -a -c -ff --wget --urpmi-root $CHROOTNAME main
	urpmi.update -a -c -ff --wget --urpmi-root $CHROOTNAME updates
	echo "## Installing packages in chroot. ##"
	urpmi --no-suggests --no-verify-rpm --fastunsafe --ignoresize --urpmi-root $CHROOTNAME --root $CHROOTNAME basesystem-minimal basesystem urpmi perl-URPM rpm locales-en rpm-build livecd-tools syslinux yum lorax grub-efi grub-efi-efi git --prefer /distro-kde4-config-OpenMandriva/ --prefer /distro-theme-OpenMandriva/ --auto
	mkdir -p $CHROOTNAME/dev
	mkdir -p $CHROOTNAME/dev/pts
	mkdir -p $CHROOTNAME/proc
	mkdir -p $CHROOTNAME/sys
fi

### these need to be mounted for anything to work inside the chroot
mount --bind /dev/	$CHROOTNAME/dev
mount --bind /dev/pts	$CHROOTNAME/dev/pts
mount --bind /proc	$CHROOTNAME/proc
mount --bind /sys	$CHROOTNAME/sys
cp /etc/resolv.conf	$CHROOTNAME/etc/

#(tpg) workaround for ISO build
#check if there is actually /proc/mounts on build host
cat /proc/mounts
ln -sf /proc/mounts $CHROOTNAME/etc/mtab

echo "## Making sure we have the latest from $BLDNAME. ##"

# For now, unconditionally overwrite the $BLDNAME instance inside the chroot
# so any local changes are sure to get in
# May want to remove the rm -rf line below once things have stabilized.
rm -rf "$CHROOTNAME/$BLDNAME"
if [ ! -d "$CHROOTNAME/$BLDNAME" ]; then
	if [ -d "`dirname $0`" ]; then
	# copy the running instance to save some network traffic
		cp -a `dirname $0` $CHROOTNAME/$BLDNAME
	fi
fi

#if [ ! -d "$CHROOTNAME/$BLDNAME" ]; then
#	if [ -d "`dirname $0`"/.git ]; then
#		# If possible, copy the running instance to save some network traffic
#		cp -a `dirname $0` $CHROOTNAME/$BLDNAME
#		chroot $CHROOTOPTS "cd /$BLDNAME; git pull"
#	else
#		chroot $CHROOTOPTS "cd / && git clone -b $BRANCH $SRCPATH"
#		chroot $CHROOTOPTS "cd /$BLDNAME; git clone -b $BRANCH $PKGLIST"
#	fi
#fi

echo "## Beginning ISO creation. ##"
#set -x

#
# ISO build starts here !
#
chroot $CHROOTOPTS "sh -x /$BLDNAME/build $EXTARCH $TREE $VERSION $RELEASE_ID $DESKTOP $DISPLAYMANAGER" 2>&1 |tee $LOGDIR/build.log

mv $CHROOTNAME/$BLDNAME/*/*.iso* $LOGDIR/
ls -l $LOGDIR/*.iso*

if echo $OURDIR |grep -q /home/vagrant; then
	# We're running in ABF -- adjust to its directory structure
	mkdir -p /home/vagrant/results /home/vagrant/archives
	mv $LOGDIR/*.iso* /home/vagrant/results/
	mv $LOGDIR/*.log /home/vagrant/archives/
fi

echo "## End of ISO creation. ##"

umount_all
