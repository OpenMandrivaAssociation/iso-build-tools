timezone #TZ#
auth --useshadow --passalgo=sha512
selinux --disabled
firewall --enabled
firstboot --enabled
part / --size 8692

services --enabled=#SVCEN#
services --disabled=#SVCDIS#

repo --name=Main --baseurl=#REPOURL#/main/release
repo --name=Contrib --baseurl=#REPOURL#/contrib/release
repo --name=Non-Free --baseurl=#REPOURL#/non-free/release
repo --name=Restricted --baseurl=#REPOURL#/restricted/release

%packages
%include .///#PKGLISTFILE#

%end

%post
echo "## Starting ISO build post procedure ##"

echo "## Make initrd symlink ##"
/usr/sbin/update-alternatives --set mkinitrd /usr/sbin/mkinitrd-dracut
rm -rf /boot/initrd-*

# adding live user
echo "## Adding live user ##"
/usr/sbin/adduser live
/usr/bin/passwd -d live
/bin/mkdir -p /home/live
/bin/cp -rfT /etc/skel /home/live/
/bin/chown -R live:live /home/live
# usermod -a -G cdrom live
# enable live user autologin
if [ -f /usr/share/config/kdm/kdmrc ]; then
	/bin/sed -i -e 's/.*AutoLoginEnable.*/AutoLoginEnable=true/g' -e 's/.*AutoLoginUser.*/AutoLoginUser=live/g' /usr/share/config/kdm/kdmrc
fi

# Allow urpmi to work
/usr/sbin/urpmi.addmedia --distrib http://abf-downloads.rosalinux.ru/#TREE#/repository/#ARCH#

# ldetect stuff
/usr/sbin/update-ldetect-lst

# setting up network manager by default
# don't forget to change it
pushd /etc/sysconfig/network-scripts
for iface in eth0 wlan0; do
	cat > ifcfg-$iface << EOF
DEVICE=$iface
ONBOOT=yes
NM_CONTROLLED=yes
EOF
done
popd

# mdkapplet tries to create these directories on startup - but crashes
# because it's not root. Let's create the directories here until we have
# a proper fix.
mkdir -p /var/cache/urpmi/partial /var/cache/urpmi/rpms

# SYSTEMD STUFF
echo "## Configure systemd services ##"
systemctl enable NetworkManager.service

# Enable DM - use you DM service name!
systemctl enable kdm.service

# turn off atd
systemctl --no-reload disable atd.service
systemctl stop atd.service

# turn of crond
systemctl --no-reload disable crond.service
systemctl stop crond.service

# turn of lm_sensors
systemctl --no-reload disable lm_sensors.service
systemctl --no-reload disable sensord.service
systemctl stop lm_sensors.service
systemctl stop sensord.service

# turn of microcode_ctl
systemctl --no-reload disable microcode_ctl.service
systemctl stop microcode_ctl.service

# turn off mdmonitor by default
systemctl --no-reload disable mdmonitor.service
systemctl --no-reload disable mdmonitor-takeover.service
systemctl stop mdmonitor.service
systemctl stop mdmonitor-takeover.service

# turn of saslauthd
systemctl --no-reload disable saslauthd.service
systemctl stop saslauthd.service

# END SYSTEMD STUFF

###chkconfig###
/sbin/chkconfig --add checkflashboot
echo "RUN CHKSESSION"
chksession -g
#####

echo "## Mounting sysfs ##"

# Sysfs must be mounted for dracut to work!
mount -t sysfs /sys /sys

mkdir -p $INSTALL_ROOT/isolinux/

pushd /lib/modules/
KERNEL=$(echo *)
popd
echo
echo "## Generating kernel. System kernel is `uname -r`, installed kernels are: ##"
rpm -qa kernel-*
echo "## Detected kernel version: $KERNEL ##"

# rebuild initrd
echo "## Rebuilding initramfs ##"
/usr/sbin/dracut --add-drivers "isofs iso9660" /boot/initramfs-$KERNEL.img $KERNEL --force --quiet

# rebuild liveramfs
echo "## Rebuilding liveramfs ##"
/usr/sbin/dracut -N -f --mount "tmpfs /var/tmp tmpfs defaults 0 0" -o " aufs-mount bash rescue resume network lvm nfs ifcfg cifs multipath mdraid dmraid " --no-early-microcode --nofscks --noprelink /boot/liveramfs-$KERNEL.img $KERNEL --quiet

echo "## Installing initrd0 inside isolinux ##"
mkdir -p /run/initramfs/live/isolinux/
rm -rf /run/initramfs/live/isolinux/initrd0.img
ln -s /boot/liveramfs-$KERNEL.img /run/initramfs/live/isolinux/initrd0.img


# Set reasonable defaults
if ! [ -e /etc/sysconfig/desktop ]; then
    cat >/etc/sysconfig/desktop <<'EOF'
DISPLAYMANAGER=#DISPLAYMANAGER#
DESKTOP=#DESKTOP#
EOF
fi

#hack for nscd loop error
while (ps -e | grep nscd)
do
    killall -s 9 nscd
done

echo "## End of ISO post procedure ##"
%end

%post --nochroot
echo "## Starting ISO build post nochroot procedure ##"

#hack to try to stop umount probs
while (.///lsof /dev/loop* | grep -v "$0" | grep "$INSTALL_ROOT")
do
    sleep 5s
done

echo "## Installing various config files ##"

# mdkapplet tries to create these directories on startup - but crashes
# because it's not root. Let's create the directories here until we have
# a proper fix.
mkdir -p $INSTALL_ROOT/var/cache/urpmi/partial $INSTALL_ROOT/var/cache/urpmi/rpms

cp -rfT .///extraconfig/etc $INSTALL_ROOT/etc/
cp -rfT .///extraconfig/usr $INSTALL_ROOT/usr/
cp -rfT .///welcome.jpg $INSTALL_ROOT/splash.jpg
cp -rfT .///welcome.jpg $INSTALL_ROOT/welcome.jpg
cp -rfT .///extraconfig/etc/skel $INSTALL_ROOT/home/live/
chown -R 500:500 $INSTALL_ROOT/home/live/
chmod -R 0777 $INSTALL_ROOT/home/live/.local
chmod -R 0777 $INSTALL_ROOT/home/live/.kde4

mkdir -p $INSTALL_ROOT/home/live/.kde4/env
echo "export KDEVARTMP=/tmp" > $INSTALL_ROOT/home/live/.kde4/env/00-live.sh
echo "export KDETMP=/tmp" >> $INSTALL_ROOT/home/live/.kde4/env/00-live.sh

#delete icon cache
find /usr/share/icons/ -name "*.cache" -type f -delete

# Don't start akonadi
if [ -e $INSTALL_ROOT/home/live/.kde4/.config/akonadi/akonadiserverrc ]; then
	sed -i -e "s/StartServer=true/StartServer=false/" ~/.config/akonadi/akonadiserverrc
else
	mkdir -p $INSTALL_ROOT/home/live/.kde4/.config/akonadi
	cat >$INSTALL_ROOT/home/live/.kde4/.config/akonadi/akonadiserverrc <<'EOF'

[%General]
Driver=QMYSQL

[QMYSQL]
Name=akonadi
Host=
Options="UNIX_SOCKET=/home/live/.local/share/akonadi/socket-localhost/mysql.socket"
ServerPath=/usr/sbin/mysqld
StartServer=false

[Debug]
Tracer=null
EOF
    chown -R 500:500 $INSTALL_ROOT/home/live/.kde4/.config/akonadi
fi

mkdir -p $INSTALL_ROOT/home/live/.cache
chown 500:500 $INSTALL_ROOT/home/live/.cache

# install repos
echo "## Installing default urpmi repositories for end user ##"

cp -rfT /etc/resolv.conf $INSTALL_ROOT/etc/resolv.conf
/usr/sbin/urpmi.removemedia -a
/usr/sbin/chroot $INSTALL_ROOT /usr/sbin/urpmi.addmedia --distrib --mirrorlist
/usr/sbin/chroot $INSTALL_ROOT /usr/sbin/urpmi.update -a

echo > $INSTALL_ROOT/etc/resolv.conf
#end of it

#ssh key don't need
rm -f $INSTALL_ROOT/etc/ssh/*key*

echo "## Copying various files ##"

cp -rfT .///.counter $INSTALL_ROOT/etc/isonumber
cp .///extraconfig/memdisk $INSTALL_ROOT/isolinux/
cp .///extraconfig/sgb.iso $INSTALL_ROOT/isolinux/
cp -f .///root/GPL $INSTALL_ROOT/

echo "## Generating rpm file list ##"

rpm --root $INSTALL_ROOT -qa | sort > $LIVE_ROOT/rpm.lst
./total_sum_counter.pl -r 640 -h 10 -w $INSTALL_ROOT/ -o $INSTALL_ROOT/etc/minsysreqs

echo "## End of ISO post nochroot procedure ##"
%end
